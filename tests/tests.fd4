#Tests de ejercicio 1 y declaraciones sin azucar sintactico.
#let resta = fun(a:Nat) -> 
#                fun(b:Nat) ->
#                    a - b

#let a = print "asdfasdfasdf" (resta 2000 1000)

#let mult = fix(mul: Nat->Nat->Nat)(m : Nat) -> fun(n : Nat) -> ifz n then 0 else (ifz n - 1 then m else m + (mul m (n - 1)))

#let TestIfz = print "ifz 0 = " (ifz 0 then (1 + 5) else 1)
#let TestIfz2 = print "ifz 0 = " (ifz 0 then TestIfz else 1)

#let TestMult = print "mult 25 10 = " (mult 25 10)

#let h = fun (x y:Nat) -> x + y
#let g = fun (x :Nat) -> h x 1
#let f = fun (x :Nat) -> 1 + (g x)

#let test = print "" (f 2)


#let rec factaz (m:Nat):Nat = ifz m then 1 else (mult m (factaz (m - 1)))
#let test2 = print "factaz 2 = " (factaz 5)
#let rec f2 (x:Nat):Nat = f2 x
#let testStack = f2 0 
#let suma = fun (x y: Nat) -> x + y
#let hola = print "suma " (suma 1 1)

let ack = fix (ackm:Nat->Nat->Nat) (m:Nat) (n:Nat) -> ifz m then (n+1) else (ifz n then (ackm (m-1) 1) else (ackm (m-1) (ackm m (n-1))))

let testAck = print "Ackermann 2 5 = " (ack 3 11)

#let TestFactaz = print "factaz 5 = " (factaz 5)